// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserService.API.Data;

#nullable disable

namespace UserService.API.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20250720051502_InitialCreate1234")]
    partial class InitialCreate1234
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Thủ đô Việt Nam",
                            Name = "Hà Nội"
                        });
                });

            modelBuilder.Entity("CoachProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Certifications")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CoachType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<string>("LinkedInUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ModuleInCharge")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Region")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Specialty")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("CoachProfiles");
                });

            modelBuilder.Entity("Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000001"),
                            CityId = new Guid("10000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hoàng Cầu"
                        });
                });

            modelBuilder.Entity("ManagerProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("LocationId");

                    b.ToTable("ManagerProfiles");
                });

            modelBuilder.Entity("PartnerProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActivatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContractUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("CreatedByAdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Industry")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PartnerType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RepresentativeEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RepresentativeName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RepresentativePhone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("LocationId");

                    b.ToTable("PartnerProfiles");
                });

            modelBuilder.Entity("PendingMembershipRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CvUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Interests")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Introduction")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MessageToStaff")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("PackageDurationUnit")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PackageDurationValue")
                        .HasColumnType("int");

                    b.Property<Guid?>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PackageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentNote")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PaymentProofUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("PaymentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentTransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PersonalityTraits")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestedPackageName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("RequireBooking")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RoomInstanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StaffNote")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PendingMembershipRequests");
                });

            modelBuilder.Entity("PendingThirdPartyRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ApprovedByManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ProfileDataJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("PendingThirdPartyRequests");
                });

            modelBuilder.Entity("Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Propertys");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Khu vực trụ sở chính Hoàng Cầu 1",
                            LocationId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Name = "Hoàng Cầu Cơ sở 1"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Khu vực trụ sở chính Hoàng Cầu 2",
                            LocationId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Name = "Hoàng Cầu Cơ sở 2"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Khu vực trụ sở chính Hoàng Cầu 3",
                            LocationId = new Guid("20000000-0000-0000-0000-000000000001"),
                            Name = "Hoàng Cầu Cơ sở 3"
                        });
                });

            modelBuilder.Entity("StaffProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("JoinedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StaffGroup")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("LocationId");

                    b.ToTable("StaffProfiles");
                });

            modelBuilder.Entity("UserService.API.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MembershipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OverallRating")
                        .HasColumnType("int");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("MembershipId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("UserService.API.Entities.FeedbackDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("FeedbackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid?>("ServiceTargetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.ToTable("FeedbackDetails");
                });

            modelBuilder.Entity("UserService.API.Entities.Interest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Interests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000001"),
                            Name = "Adventure travel"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000002"),
                            Name = "Alternative energy"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000003"),
                            Name = "Alternative medicine"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000004"),
                            Name = "Animal welfare"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000005"),
                            Name = "Astronomy"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000006"),
                            Name = "Athletics"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000007"),
                            Name = "Backpacking"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000008"),
                            Name = "Badminton"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000009"),
                            Name = "Baseball"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000010"),
                            Name = "Basketball"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000011"),
                            Name = "Beer tasting"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000012"),
                            Name = "Bicycling"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000013"),
                            Name = "Board games"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000014"),
                            Name = "Bowling"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000015"),
                            Name = "Brunch"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000016"),
                            Name = "Camping"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000017"),
                            Name = "Clubbing"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000018"),
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000019"),
                            Name = "Conservation"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000020"),
                            Name = "Cooking"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000021"),
                            Name = "Crafts"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000022"),
                            Name = "DIY – Do it Yourself"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000023"),
                            Name = "Dancing"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000024"),
                            Name = "Dining out"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000025"),
                            Name = "Diving"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000026"),
                            Name = "Drinking"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000027"),
                            Name = "Education technology"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000028"),
                            Name = "Entrepreneurship"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000029"),
                            Name = "Environmental awareness"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000030"),
                            Name = "Fencing"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000031"),
                            Name = "Film"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000032"),
                            Name = "Finance technology"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000033"),
                            Name = "Fishing"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000034"),
                            Name = "Fitness"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000035"),
                            Name = "Frisbee"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000036"),
                            Name = "Gaming"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000037"),
                            Name = "Golf"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000038"),
                            Name = "Happy hour"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000039"),
                            Name = "Healing"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000040"),
                            Name = "Hiking"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000041"),
                            Name = "History"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000042"),
                            Name = "Holistic health"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000043"),
                            Name = "Horse riding"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000044"),
                            Name = "Human rights"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000045"),
                            Name = "Hunting"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000046"),
                            Name = "Ice skating"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000047"),
                            Name = "Innovation"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000048"),
                            Name = "International travel"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000049"),
                            Name = "Internet startups"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000050"),
                            Name = "Investing"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000051"),
                            Name = "Karaoke"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000052"),
                            Name = "Kayaking"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000053"),
                            Name = "Languages"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000054"),
                            Name = "Literature"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000055"),
                            Name = "Local culture"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000056"),
                            Name = "Marketing"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000057"),
                            Name = "Martial arts"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000058"),
                            Name = "Meditation"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000059"),
                            Name = "Mountain biking"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000060"),
                            Name = "Music"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000061"),
                            Name = "Natural parks"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000062"),
                            Name = "Networking"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000063"),
                            Name = "Neuroscience"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000064"),
                            Name = "Nightlife"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000065"),
                            Name = "Nutrition"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000066"),
                            Name = "Outdoor adventure"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000067"),
                            Name = "Outdoor sports"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000068"),
                            Name = "Painting"
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000069"),
                            Name = "Photography"
                        });
                });

            modelBuilder.Entity("UserService.API.Entities.LocationMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("MembershipLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId", "MembershipLocationId")
                        .IsUnique();

                    b.ToTable("LocationMappings");
                });

            modelBuilder.Entity("UserService.API.Entities.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PackageDurationUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PackageDurationValue")
                        .HasColumnType("int");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PackageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PaymentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentTransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PendingRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PlanSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PurchasedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RoomInstanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("UsedForRoleUpgrade")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("PendingRequestId");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("UserService.API.Entities.PersonalityTrait", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PersonalityTraits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000001"),
                            Name = "Introvert"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000002"),
                            Name = "Optimistic"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000003"),
                            Name = "Extrovert"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000004"),
                            Name = "Realistic"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000005"),
                            Name = "Ambitious"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000006"),
                            Name = "Easygoing"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000007"),
                            Name = "Thoughtful"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000008"),
                            Name = "Energetic"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000009"),
                            Name = "Creative"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000010"),
                            Name = "Reliable"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000011"),
                            Name = "Adventurous"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000012"),
                            Name = "Compassionate"
                        });
                });

            modelBuilder.Entity("UserService.API.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000001"),
                            Name = "A/B testing"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000002"),
                            Name = "AI"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000003"),
                            Name = "API development"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000004"),
                            Name = "Accounting"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000005"),
                            Name = "Administrative support"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000006"),
                            Name = "Advertising"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000007"),
                            Name = "Affiliate marketing"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000008"),
                            Name = "Android development"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000009"),
                            Name = "Animators"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000010"),
                            Name = "Audio production"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000011"),
                            Name = "Back-end development"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000012"),
                            Name = "Blogging"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000013"),
                            Name = "Bookkeeping"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000014"),
                            Name = "Brand strategy"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000015"),
                            Name = "Branding"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000016"),
                            Name = "Business development"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000017"),
                            Name = "CRM management"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000018"),
                            Name = "Communication"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000019"),
                            Name = "Community management"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000020"),
                            Name = "Content"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000021"),
                            Name = "Content marketing"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000022"),
                            Name = "Copyediting"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000023"),
                            Name = "Copywriting"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000024"),
                            Name = "Creative writing"
                        });
                });

            modelBuilder.Entity("UserService.API.Entities.SupplierProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Industry")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("LocationId");

                    b.ToTable("SupplierProfiles");
                });

            modelBuilder.Entity("UserService.API.Entities.UserInterest", b =>
                {
                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InterestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserProfileId", "InterestId");

                    b.HasIndex("InterestId");

                    b.ToTable("UserInterests");
                });

            modelBuilder.Entity("UserService.API.Entities.UserPersonalityTrait", b =>
                {
                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonalityTraitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserProfileId", "PersonalityTraitId");

                    b.HasIndex("PersonalityTraitId");

                    b.ToTable("UserPersonalityTraits");
                });

            modelBuilder.Entity("UserService.API.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedByAdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CvUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Interests")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Introduction")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("OnboardingStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersonalityTraits")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RoleType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SocialLinks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("VerifiedByAdmin")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("CityId");

                    b.HasIndex("LocationId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("UserService.API.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserProfileId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("CoachProfile", b =>
                {
                    b.HasOne("UserService.API.Entities.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Location", b =>
                {
                    b.HasOne("City", "City")
                        .WithMany("Locations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("ManagerProfile", b =>
                {
                    b.HasOne("UserService.API.Entities.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Property", "Property")
                        .WithMany("ManagerProfiles")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Property");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("PartnerProfile", b =>
                {
                    b.HasOne("UserService.API.Entities.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Property", "Property")
                        .WithMany("PartnerProfiles")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Property");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("PendingMembershipRequest", b =>
                {
                    b.HasOne("UserService.API.Entities.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Property", null)
                        .WithMany("PendingMembershipRequests")
                        .HasForeignKey("PropertyId");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("PendingThirdPartyRequest", b =>
                {
                    b.HasOne("Property", "Property")
                        .WithMany("PendingThirdPartyRequests")
                        .HasForeignKey("LocationId");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Property", b =>
                {
                    b.HasOne("Location", "Location")
                        .WithMany("Properties")
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("StaffProfile", b =>
                {
                    b.HasOne("UserService.API.Entities.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Property", "Property")
                        .WithMany("StaffProfiles")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Property");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("UserService.API.Entities.Feedback", b =>
                {
                    b.HasOne("UserService.API.Entities.UserProfile", "User")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserService.API.Entities.Membership", "Membership")
                        .WithMany()
                        .HasForeignKey("MembershipId");

                    b.Navigation("Membership");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserService.API.Entities.FeedbackDetail", b =>
                {
                    b.HasOne("UserService.API.Entities.Feedback", "Feedback")
                        .WithMany("Details")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("UserService.API.Entities.LocationMapping", b =>
                {
                    b.HasOne("Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("UserService.API.Entities.Membership", b =>
                {
                    b.HasOne("UserService.API.Entities.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PendingMembershipRequest", "PendingRequest")
                        .WithMany()
                        .HasForeignKey("PendingRequestId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("PendingRequest");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("UserService.API.Entities.SupplierProfile", b =>
                {
                    b.HasOne("UserService.API.Entities.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Property", "Property")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Property");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("UserService.API.Entities.UserInterest", b =>
                {
                    b.HasOne("UserService.API.Entities.Interest", "Interest")
                        .WithMany()
                        .HasForeignKey("InterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserService.API.Entities.UserProfile", "UserProfile")
                        .WithMany("UserInterests")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interest");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("UserService.API.Entities.UserPersonalityTrait", b =>
                {
                    b.HasOne("UserService.API.Entities.PersonalityTrait", "PersonalityTrait")
                        .WithMany()
                        .HasForeignKey("PersonalityTraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserService.API.Entities.UserProfile", "UserProfile")
                        .WithMany("UserPersonalityTraits")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalityTrait");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("UserService.API.Entities.UserProfile", b =>
                {
                    b.HasOne("City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Property", "Property")
                        .WithMany("UserProfiles")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("City");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("UserService.API.Entities.UserSkill", b =>
                {
                    b.HasOne("UserService.API.Entities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserService.API.Entities.UserProfile", "UserProfile")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("City", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Location", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Property", b =>
                {
                    b.Navigation("ManagerProfiles");

                    b.Navigation("PartnerProfiles");

                    b.Navigation("PendingMembershipRequests");

                    b.Navigation("PendingThirdPartyRequests");

                    b.Navigation("StaffProfiles");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("UserService.API.Entities.Feedback", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("UserService.API.Entities.UserProfile", b =>
                {
                    b.Navigation("UserInterests");

                    b.Navigation("UserPersonalityTraits");

                    b.Navigation("UserSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
