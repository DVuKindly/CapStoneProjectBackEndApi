// <auto-generated />
using System;
using MembershipService.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MembershipService.API.Migrations
{
    [DbContext(typeof(MembershipDbContext))]
    [Migration("20250610201617_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MembershipService.API.Entities.BasicPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PackageTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("VerifyBuy")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PackageTypeId");

                    b.ToTable("BasicPackages");
                });

            modelBuilder.Entity("MembershipService.API.Entities.ComboPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasicPackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("DiscountRate")
                        .HasColumnType("real");

                    b.Property<bool>("IsSuggested")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PackageLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BasicPackageId");

                    b.HasIndex("PackageLevelId");

                    b.ToTable("ComboPackages");
                });

            modelBuilder.Entity("MembershipService.API.Entities.ComboPackageService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComboPackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("NextUServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ComboPackageId");

                    b.HasIndex("NextUServiceId");

                    b.ToTable("ComboPackageServices");
                });

            modelBuilder.Entity("MembershipService.API.Entities.Ecosystem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ecosystems");
                });

            modelBuilder.Entity("MembershipService.API.Entities.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BasicPackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("NexUServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BasicPackageId");

                    b.HasIndex("NexUServiceId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("MembershipService.API.Entities.NextUService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EcosystemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EcosystemId");

                    b.ToTable("NextUServices");
                });

            modelBuilder.Entity("MembershipService.API.Entities.PackageLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PackageLevels");
                });

            modelBuilder.Entity("MembershipService.API.Entities.PackageType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PackageTypes");
                });

            modelBuilder.Entity("MembershipService.API.Entities.ServicePricing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BasicPackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ComboPackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CreditCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOptional")
                        .HasColumnType("bit");

                    b.Property<Guid>("NextUServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("OverridePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BasicPackageId");

                    b.HasIndex("ComboPackageId");

                    b.HasIndex("NextUServiceId");

                    b.ToTable("ServicePricings");
                });

            modelBuilder.Entity("MembershipService.API.Entities.BasicPackage", b =>
                {
                    b.HasOne("MembershipService.API.Entities.PackageType", "PackageType")
                        .WithMany("BasicPackages")
                        .HasForeignKey("PackageTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PackageType");
                });

            modelBuilder.Entity("MembershipService.API.Entities.ComboPackage", b =>
                {
                    b.HasOne("MembershipService.API.Entities.BasicPackage", "BasicPackage")
                        .WithMany("ComboPackages")
                        .HasForeignKey("BasicPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MembershipService.API.Entities.PackageLevel", "PackageLevel")
                        .WithMany("ComboPackages")
                        .HasForeignKey("PackageLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BasicPackage");

                    b.Navigation("PackageLevel");
                });

            modelBuilder.Entity("MembershipService.API.Entities.ComboPackageService", b =>
                {
                    b.HasOne("MembershipService.API.Entities.ComboPackage", "ComboPackage")
                        .WithMany("ComboPackageServices")
                        .HasForeignKey("ComboPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MembershipService.API.Entities.NextUService", "NextUService")
                        .WithMany("ComboPackageServices")
                        .HasForeignKey("NextUServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ComboPackage");

                    b.Navigation("NextUService");
                });

            modelBuilder.Entity("MembershipService.API.Entities.Media", b =>
                {
                    b.HasOne("MembershipService.API.Entities.BasicPackage", "BasicPackage")
                        .WithMany("MediaGallery")
                        .HasForeignKey("BasicPackageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MembershipService.API.Entities.NextUService", "NextUService")
                        .WithMany("MediaGallery")
                        .HasForeignKey("NexUServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BasicPackage");

                    b.Navigation("NextUService");
                });

            modelBuilder.Entity("MembershipService.API.Entities.NextUService", b =>
                {
                    b.HasOne("MembershipService.API.Entities.Ecosystem", "Ecosystem")
                        .WithMany("NextUServices")
                        .HasForeignKey("EcosystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ecosystem");
                });

            modelBuilder.Entity("MembershipService.API.Entities.ServicePricing", b =>
                {
                    b.HasOne("MembershipService.API.Entities.BasicPackage", "BasicPackage")
                        .WithMany("ServicePricings")
                        .HasForeignKey("BasicPackageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MembershipService.API.Entities.ComboPackage", "ComboPackage")
                        .WithMany("ServicePricings")
                        .HasForeignKey("ComboPackageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MembershipService.API.Entities.NextUService", "NextUService")
                        .WithMany("ServicePricings")
                        .HasForeignKey("NextUServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BasicPackage");

                    b.Navigation("ComboPackage");

                    b.Navigation("NextUService");
                });

            modelBuilder.Entity("MembershipService.API.Entities.BasicPackage", b =>
                {
                    b.Navigation("ComboPackages");

                    b.Navigation("MediaGallery");

                    b.Navigation("ServicePricings");
                });

            modelBuilder.Entity("MembershipService.API.Entities.ComboPackage", b =>
                {
                    b.Navigation("ComboPackageServices");

                    b.Navigation("ServicePricings");
                });

            modelBuilder.Entity("MembershipService.API.Entities.Ecosystem", b =>
                {
                    b.Navigation("NextUServices");
                });

            modelBuilder.Entity("MembershipService.API.Entities.NextUService", b =>
                {
                    b.Navigation("ComboPackageServices");

                    b.Navigation("MediaGallery");

                    b.Navigation("ServicePricings");
                });

            modelBuilder.Entity("MembershipService.API.Entities.PackageLevel", b =>
                {
                    b.Navigation("ComboPackages");
                });

            modelBuilder.Entity("MembershipService.API.Entities.PackageType", b =>
                {
                    b.Navigation("BasicPackages");
                });
#pragma warning restore 612, 618
        }
    }
}
