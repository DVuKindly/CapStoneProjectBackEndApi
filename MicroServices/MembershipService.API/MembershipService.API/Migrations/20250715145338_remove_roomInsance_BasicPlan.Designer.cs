// <auto-generated />
using System;
using MembershipService.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MembershipService.API.Migrations
{
    [DbContext(typeof(MembershipDbContext))]
    [Migration("20250715145338_remove_roomInsance_BasicPlan")]
    partial class remove_roomInsance_BasicPlan
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MembershipService.API.Entities.AccommodationOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NextUServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("NextUServiceId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("AccommodationOptions");
                });

            modelBuilder.Entity("MembershipService.API.Entities.BasicPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BasicPlanCategoryId")
                        .HasColumnType("int");

                    b.Property<Guid>("BasicPlanTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlanLevelId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("RequireBooking")
                        .HasColumnType("bit");

                    b.Property<int>("TargetAudienceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("VerifyBuy")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BasicPlanCategoryId");

                    b.HasIndex("BasicPlanTypeId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("PlanLevelId");

                    b.HasIndex("TargetAudienceId");

                    b.ToTable("BasicPlans");
                });

            modelBuilder.Entity("MembershipService.API.Entities.BasicPlanCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("BasicPlanTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BasicPlanTypeId");

                    b.ToTable("BasicPlanCategories");
                });

            modelBuilder.Entity("MembershipService.API.Entities.BasicPlanEntitlement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasicPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntitlementRuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BasicPlanId");

                    b.HasIndex("EntitlementRuleId");

                    b.ToTable("BasicPlanEntitlements");
                });

            modelBuilder.Entity("MembershipService.API.Entities.BasicPlanLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("BasicPlanTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BasicPlanTypeId");

                    b.ToTable("BasicPlanLevels");
                });

            modelBuilder.Entity("MembershipService.API.Entities.BasicPlanRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccommodationOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasicPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccommodationOptionId");

                    b.HasIndex("BasicPlanId");

                    b.ToTable("BasicPlanRooms");
                });

            modelBuilder.Entity("MembershipService.API.Entities.BasicPlanType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BasicPlanTypes");
                });

            modelBuilder.Entity("MembershipService.API.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoomInstanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoomInstanceId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("MembershipService.API.Entities.ComboPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsSuggested")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PackageLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("VerifyBuy")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("PackageLevelId");

                    b.ToTable("ComboPlans");
                });

            modelBuilder.Entity("MembershipService.API.Entities.ComboPlanBasic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasicPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComboPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BasicPlanId");

                    b.HasIndex("ComboPlanId");

                    b.ToTable("ComboPlanBasics");
                });

            modelBuilder.Entity("MembershipService.API.Entities.ComboPlanDuration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BasicPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ComboPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountDurationRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PackageDurationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BasicPlanId");

                    b.HasIndex("ComboPlanId");

                    b.HasIndex("PackageDurationId");

                    b.ToTable("ComboPlanDurations");
                });

            modelBuilder.Entity("MembershipService.API.Entities.Ecosystem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ecosystems");
                });

            modelBuilder.Entity("MembershipService.API.Entities.EntitlementRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreditAmount")
                        .HasColumnType("int");

                    b.Property<int?>("LimitPerPeriod")
                        .HasColumnType("int");

                    b.Property<Guid>("NextUServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NextUServiceId");

                    b.ToTable("EntitlementRules");
                });

            modelBuilder.Entity("MembershipService.API.Entities.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Propertys");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000001"),
                            Code = "HN",
                            Description = "Khu vực miền Bắc",
                            Name = "Hà Nội"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000002"),
                            Code = "DN",
                            Description = "Khu vực miền Trung",
                            Name = "Đà Nẵng"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000003"),
                            Code = "HP",
                            Description = "Hải Phòng",
                            Name = "Hải Phòng"
                        });
                });

            modelBuilder.Entity("MembershipService.API.Entities.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccommodationOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("NextUServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccommodationOptionId");

                    b.HasIndex("NextUServiceId");

                    b.ToTable("MediaGallery");
                });

            modelBuilder.Entity("MembershipService.API.Entities.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BasicPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ComboPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PackageNameSnapshot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PriceSnapshot")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BasicPlanId");

                    b.HasIndex("ComboPlanId");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("MembershipService.API.Entities.MembershipHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BasicPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ComboPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageNameSnapshot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PriceSnapshot")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PurchasedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BasicPlanId");

                    b.HasIndex("ComboPlanId");

                    b.ToTable("MembershipHistory");
                });

            modelBuilder.Entity("MembershipService.API.Entities.NextUService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EcosystemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EcosystemId");

                    b.HasIndex("PropertyId");

                    b.ToTable("NextUServices");
                });

            modelBuilder.Entity("MembershipService.API.Entities.PackageDuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PackageDurations");
                });

            modelBuilder.Entity("MembershipService.API.Entities.PackageLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PackageLevels");
                });

            modelBuilder.Entity("MembershipService.API.Entities.PlanTargetAudience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlanTargetAudiences");
                });

            modelBuilder.Entity("MembershipService.API.Entities.RoomInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccommodationOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<string>("RoomCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccommodationOptionId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("MembershipService.API.Entities.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoomType");
                });

            modelBuilder.Entity("MembershipService.API.Entities.AccommodationOption", b =>
                {
                    b.HasOne("MembershipService.API.Entities.Property", "Property")
                        .WithMany("AccommodationOptions")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MembershipService.API.Entities.NextUService", "NextUService")
                        .WithMany("AccommodationOptions")
                        .HasForeignKey("NextUServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MembershipService.API.Entities.RoomType", "RoomType")
                        .WithMany("AccommodationOptions")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("NextUService");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("MembershipService.API.Entities.BasicPlan", b =>
                {
                    b.HasOne("MembershipService.API.Entities.BasicPlanCategory", "BasicPlanCategory")
                        .WithMany("BasicPlans")
                        .HasForeignKey("BasicPlanCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MembershipService.API.Entities.BasicPlanType", "BasicPlanType")
                        .WithMany("BasicPlans")
                        .HasForeignKey("BasicPlanTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MembershipService.API.Entities.Property", "Property")
                        .WithMany("BasicPlans")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MembershipService.API.Entities.BasicPlanLevel", "BasicPlanLevel")
                        .WithMany("BasicPlans")
                        .HasForeignKey("PlanLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MembershipService.API.Entities.PlanTargetAudience", "PlanTargetAudience")
                        .WithMany("BasicPlans")
                        .HasForeignKey("TargetAudienceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BasicPlanCategory");

                    b.Navigation("BasicPlanLevel");

                    b.Navigation("BasicPlanType");

                    b.Navigation("Property");

                    b.Navigation("PlanTargetAudience");
                });

            modelBuilder.Entity("MembershipService.API.Entities.BasicPlanCategory", b =>
                {
                    b.HasOne("MembershipService.API.Entities.BasicPlanType", "BasicPlanType")
                        .WithMany("BasicPlanCategories")
                        .HasForeignKey("BasicPlanTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BasicPlanType");
                });

            modelBuilder.Entity("MembershipService.API.Entities.BasicPlanEntitlement", b =>
                {
                    b.HasOne("MembershipService.API.Entities.BasicPlan", "BasicPlan")
                        .WithMany("BasicPlanEntitlements")
                        .HasForeignKey("BasicPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MembershipService.API.Entities.EntitlementRule", "EntitlementRule")
                        .WithMany()
                        .HasForeignKey("EntitlementRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BasicPlan");

                    b.Navigation("EntitlementRule");
                });

            modelBuilder.Entity("MembershipService.API.Entities.BasicPlanLevel", b =>
                {
                    b.HasOne("MembershipService.API.Entities.BasicPlanType", "BasicPlanType")
                        .WithMany("BasicPlanLevels")
                        .HasForeignKey("BasicPlanTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BasicPlanType");
                });

            modelBuilder.Entity("MembershipService.API.Entities.BasicPlanRoom", b =>
                {
                    b.HasOne("MembershipService.API.Entities.AccommodationOption", "AccommodationOption")
                        .WithMany("BasicPlanRooms")
                        .HasForeignKey("AccommodationOptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MembershipService.API.Entities.BasicPlan", "BasicPlan")
                        .WithMany("BasicPlanRooms")
                        .HasForeignKey("BasicPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccommodationOption");

                    b.Navigation("BasicPlan");
                });

            modelBuilder.Entity("MembershipService.API.Entities.Booking", b =>
                {
                    b.HasOne("MembershipService.API.Entities.RoomInstance", "RoomInstance")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomInstance");
                });

            modelBuilder.Entity("MembershipService.API.Entities.ComboPlan", b =>
                {
                    b.HasOne("MembershipService.API.Entities.Property", "Property")
                        .WithMany("ComboPlans")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MembershipService.API.Entities.PackageLevel", "PackageLevel")
                        .WithMany("ComboPlans")
                        .HasForeignKey("PackageLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("PackageLevel");
                });

            modelBuilder.Entity("MembershipService.API.Entities.ComboPlanBasic", b =>
                {
                    b.HasOne("MembershipService.API.Entities.BasicPlan", "BasicPlan")
                        .WithMany("ComboPlanBasics")
                        .HasForeignKey("BasicPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MembershipService.API.Entities.ComboPlan", "ComboPlan")
                        .WithMany("ComboPlanBasics")
                        .HasForeignKey("ComboPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BasicPlan");

                    b.Navigation("ComboPlan");
                });

            modelBuilder.Entity("MembershipService.API.Entities.ComboPlanDuration", b =>
                {
                    b.HasOne("MembershipService.API.Entities.BasicPlan", "BasicPlan")
                        .WithMany("ComboPlanDurations")
                        .HasForeignKey("BasicPlanId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MembershipService.API.Entities.ComboPlan", "ComboPlan")
                        .WithMany("ComboPlanDurations")
                        .HasForeignKey("ComboPlanId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MembershipService.API.Entities.PackageDuration", "PackageDuration")
                        .WithMany("ComboPlanDurations")
                        .HasForeignKey("PackageDurationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BasicPlan");

                    b.Navigation("ComboPlan");

                    b.Navigation("PackageDuration");
                });

            modelBuilder.Entity("MembershipService.API.Entities.EntitlementRule", b =>
                {
                    b.HasOne("MembershipService.API.Entities.NextUService", "NextUService")
                        .WithMany("EntitlementRules")
                        .HasForeignKey("NextUServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NextUService");
                });

            modelBuilder.Entity("MembershipService.API.Entities.Media", b =>
                {
                    b.HasOne("MembershipService.API.Entities.AccommodationOption", "AccommodationOption")
                        .WithMany("MediaGallery")
                        .HasForeignKey("AccommodationOptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MembershipService.API.Entities.NextUService", "NextUService")
                        .WithMany("MediaGallery")
                        .HasForeignKey("NextUServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AccommodationOption");

                    b.Navigation("NextUService");
                });

            modelBuilder.Entity("MembershipService.API.Entities.Membership", b =>
                {
                    b.HasOne("MembershipService.API.Entities.BasicPlan", "BasicPlan")
                        .WithMany("Memberships")
                        .HasForeignKey("BasicPlanId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MembershipService.API.Entities.ComboPlan", "ComboPlan")
                        .WithMany("Memberships")
                        .HasForeignKey("ComboPlanId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BasicPlan");

                    b.Navigation("ComboPlan");
                });

            modelBuilder.Entity("MembershipService.API.Entities.MembershipHistory", b =>
                {
                    b.HasOne("MembershipService.API.Entities.BasicPlan", "BasicPlan")
                        .WithMany("MembershipHistories")
                        .HasForeignKey("BasicPlanId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MembershipService.API.Entities.ComboPlan", "ComboPlan")
                        .WithMany("MembershipHistories")
                        .HasForeignKey("ComboPlanId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BasicPlan");

                    b.Navigation("ComboPlan");
                });

            modelBuilder.Entity("MembershipService.API.Entities.NextUService", b =>
                {
                    b.HasOne("MembershipService.API.Entities.Ecosystem", "Ecosystem")
                        .WithMany("NextUServices")
                        .HasForeignKey("EcosystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MembershipService.API.Entities.Property", "Property")
                        .WithMany("NextUServices")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Ecosystem");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("MembershipService.API.Entities.RoomInstance", b =>
                {
                    b.HasOne("MembershipService.API.Entities.AccommodationOption", "AccommodationOption")
                        .WithMany("Rooms")
                        .HasForeignKey("AccommodationOptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccommodationOption");
                });

            modelBuilder.Entity("MembershipService.API.Entities.AccommodationOption", b =>
                {
                    b.Navigation("BasicPlanRooms");

                    b.Navigation("MediaGallery");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("MembershipService.API.Entities.BasicPlan", b =>
                {
                    b.Navigation("BasicPlanEntitlements");

                    b.Navigation("BasicPlanRooms");

                    b.Navigation("ComboPlanBasics");

                    b.Navigation("ComboPlanDurations");

                    b.Navigation("MembershipHistories");

                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("MembershipService.API.Entities.BasicPlanCategory", b =>
                {
                    b.Navigation("BasicPlans");
                });

            modelBuilder.Entity("MembershipService.API.Entities.BasicPlanLevel", b =>
                {
                    b.Navigation("BasicPlans");
                });

            modelBuilder.Entity("MembershipService.API.Entities.BasicPlanType", b =>
                {
                    b.Navigation("BasicPlanCategories");

                    b.Navigation("BasicPlanLevels");

                    b.Navigation("BasicPlans");
                });

            modelBuilder.Entity("MembershipService.API.Entities.ComboPlan", b =>
                {
                    b.Navigation("ComboPlanBasics");

                    b.Navigation("ComboPlanDurations");

                    b.Navigation("MembershipHistories");

                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("MembershipService.API.Entities.Ecosystem", b =>
                {
                    b.Navigation("NextUServices");
                });

            modelBuilder.Entity("MembershipService.API.Entities.Property", b =>
                {
                    b.Navigation("AccommodationOptions");

                    b.Navigation("BasicPlans");

                    b.Navigation("ComboPlans");

                    b.Navigation("NextUServices");
                });

            modelBuilder.Entity("MembershipService.API.Entities.NextUService", b =>
                {
                    b.Navigation("AccommodationOptions");

                    b.Navigation("EntitlementRules");

                    b.Navigation("MediaGallery");
                });

            modelBuilder.Entity("MembershipService.API.Entities.PackageDuration", b =>
                {
                    b.Navigation("ComboPlanDurations");
                });

            modelBuilder.Entity("MembershipService.API.Entities.PackageLevel", b =>
                {
                    b.Navigation("ComboPlans");
                });

            modelBuilder.Entity("MembershipService.API.Entities.PlanTargetAudience", b =>
                {
                    b.Navigation("BasicPlans");
                });

            modelBuilder.Entity("MembershipService.API.Entities.RoomInstance", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("MembershipService.API.Entities.RoomType", b =>
                {
                    b.Navigation("AccommodationOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
