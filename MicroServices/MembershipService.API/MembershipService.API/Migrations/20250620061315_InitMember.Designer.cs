// <auto-generated />
using System;
using MembershipService.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MembershipService.API.Migrations
{
    [DbContext(typeof(MembershipDbContext))]
    [Migration("20250620061315_InitMember")]
    partial class InitMember
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MembershipService.API.Entities.BasicPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PackageDurationId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("VerifyBuy")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("PackageDurationId");

                    b.ToTable("BasicPlans");
                });

            modelBuilder.Entity("MembershipService.API.Entities.BasicPlanService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasicPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("NextUServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BasicPlanId");

                    b.HasIndex("NextUServiceId");

                    b.ToTable("BasicPlanServices");
                });

            modelBuilder.Entity("MembershipService.API.Entities.ComboPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasicPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("DiscountRate")
                        .HasColumnType("real");

                    b.Property<bool>("IsSuggested")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PackageLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BasicPlanId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PackageLevelId");

                    b.ToTable("ComboPlans");
                });

            modelBuilder.Entity("MembershipService.API.Entities.ComboPlanService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComboPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("NextUServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ComboPlanId");

                    b.HasIndex("NextUServiceId");

                    b.ToTable("ComboPlanServices");
                });

            modelBuilder.Entity("MembershipService.API.Entities.Ecosystem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ecosystems");
                });

            modelBuilder.Entity("MembershipService.API.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Code = "HN",
                            Description = "Khu vực miền Bắc",
                            Name = "Hà Nội"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Code = "DN",
                            Description = "Khu vực miền Trung",
                            Name = "Đà Nẵng"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Code = "HCM",
                            Description = "Khu vực miền Nam",
                            Name = "Hồ Chí Minh"
                        });
                });

            modelBuilder.Entity("MembershipService.API.Entities.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BasicPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("NexUServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BasicPlanId");

                    b.HasIndex("NexUServiceId");

                    b.ToTable("MediaGallery");
                });

            modelBuilder.Entity("MembershipService.API.Entities.NextUService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EcosystemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UnitType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EcosystemId");

                    b.HasIndex("LocationId");

                    b.ToTable("NextUServices");
                });

            modelBuilder.Entity("MembershipService.API.Entities.PackageDuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PackageDurations");
                });

            modelBuilder.Entity("MembershipService.API.Entities.PackageLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PackageLevels");
                });

            modelBuilder.Entity("MembershipService.API.Entities.BasicPlan", b =>
                {
                    b.HasOne("MembershipService.API.Entities.Location", "Location")
                        .WithMany("BasicPlans")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MembershipService.API.Entities.PackageDuration", "PackageDuration")
                        .WithMany("BasicPlans")
                        .HasForeignKey("PackageDurationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("PackageDuration");
                });

            modelBuilder.Entity("MembershipService.API.Entities.BasicPlanService", b =>
                {
                    b.HasOne("MembershipService.API.Entities.BasicPlan", "BasicPlan")
                        .WithMany("BasicPlanServices")
                        .HasForeignKey("BasicPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MembershipService.API.Entities.NextUService", "NextUService")
                        .WithMany("BasicPlanServices")
                        .HasForeignKey("NextUServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BasicPlan");

                    b.Navigation("NextUService");
                });

            modelBuilder.Entity("MembershipService.API.Entities.ComboPlan", b =>
                {
                    b.HasOne("MembershipService.API.Entities.BasicPlan", "BasicPlan")
                        .WithMany("ComboPlans")
                        .HasForeignKey("BasicPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MembershipService.API.Entities.Location", "Location")
                        .WithMany("ComboPlans")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MembershipService.API.Entities.PackageLevel", "PackageLevel")
                        .WithMany("ComboPlans")
                        .HasForeignKey("PackageLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BasicPlan");

                    b.Navigation("Location");

                    b.Navigation("PackageLevel");
                });

            modelBuilder.Entity("MembershipService.API.Entities.ComboPlanService", b =>
                {
                    b.HasOne("MembershipService.API.Entities.ComboPlan", "ComboPlan")
                        .WithMany("ComboPlanServices")
                        .HasForeignKey("ComboPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MembershipService.API.Entities.NextUService", "NextUService")
                        .WithMany("ComboPlanServices")
                        .HasForeignKey("NextUServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ComboPlan");

                    b.Navigation("NextUService");
                });

            modelBuilder.Entity("MembershipService.API.Entities.Media", b =>
                {
                    b.HasOne("MembershipService.API.Entities.BasicPlan", "BasicPlan")
                        .WithMany("MediaGallery")
                        .HasForeignKey("BasicPlanId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MembershipService.API.Entities.NextUService", "NextUService")
                        .WithMany("MediaGallery")
                        .HasForeignKey("NexUServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BasicPlan");

                    b.Navigation("NextUService");
                });

            modelBuilder.Entity("MembershipService.API.Entities.NextUService", b =>
                {
                    b.HasOne("MembershipService.API.Entities.Ecosystem", "Ecosystem")
                        .WithMany("NextUServices")
                        .HasForeignKey("EcosystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MembershipService.API.Entities.Location", "Location")
                        .WithMany("NextUServices")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Ecosystem");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MembershipService.API.Entities.BasicPlan", b =>
                {
                    b.Navigation("BasicPlanServices");

                    b.Navigation("ComboPlans");

                    b.Navigation("MediaGallery");
                });

            modelBuilder.Entity("MembershipService.API.Entities.ComboPlan", b =>
                {
                    b.Navigation("ComboPlanServices");
                });

            modelBuilder.Entity("MembershipService.API.Entities.Ecosystem", b =>
                {
                    b.Navigation("NextUServices");
                });

            modelBuilder.Entity("MembershipService.API.Entities.Location", b =>
                {
                    b.Navigation("BasicPlans");

                    b.Navigation("ComboPlans");

                    b.Navigation("NextUServices");
                });

            modelBuilder.Entity("MembershipService.API.Entities.NextUService", b =>
                {
                    b.Navigation("BasicPlanServices");

                    b.Navigation("ComboPlanServices");

                    b.Navigation("MediaGallery");
                });

            modelBuilder.Entity("MembershipService.API.Entities.PackageDuration", b =>
                {
                    b.Navigation("BasicPlans");
                });

            modelBuilder.Entity("MembershipService.API.Entities.PackageLevel", b =>
                {
                    b.Navigation("ComboPlans");
                });
#pragma warning restore 612, 618
        }
    }
}
