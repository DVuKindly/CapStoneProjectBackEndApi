// <auto-generated />
using System;
using AuthService.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthService.API.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    partial class AuthDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthService.API.Entities.Permission", b =>
                {
                    b.Property<Guid>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermissionKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0001"),
                            Description = "Gán role",
                            PermissionKey = "assign_role"
                        },
                        new
                        {
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0002"),
                            Description = "Gán quyền cho role",
                            PermissionKey = "assign_permission_to_role"
                        },
                        new
                        {
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0003"),
                            Description = "Gán quyền cho user",
                            PermissionKey = "assign_permission_to_user"
                        },
                        new
                        {
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0004"),
                            Description = "Truy cập dashboard admin",
                            PermissionKey = "access_admin_dashboard"
                        },
                        new
                        {
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0005"),
                            Description = "Tạo nhà cung cấp",
                            PermissionKey = "create_supplier"
                        },
                        new
                        {
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0006"),
                            Description = "Tạo đối tác",
                            PermissionKey = "create_partner"
                        },
                        new
                        {
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0007"),
                            Description = "Tạo Manager",
                            PermissionKey = "create_manager"
                        },
                        new
                        {
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0008"),
                            Description = "Tạo Staff Onboarding",
                            PermissionKey = "create_staff_onboarding"
                        },
                        new
                        {
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0009"),
                            Description = "Tạo Staff Service",
                            PermissionKey = "create_staff_service"
                        },
                        new
                        {
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0010"),
                            Description = "Tạo Staff Content",
                            PermissionKey = "create_staff_content"
                        },
                        new
                        {
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0011"),
                            Description = "Tạo Coach",
                            PermissionKey = "create_coach"
                        },
                        new
                        {
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0012"),
                            Description = "Tạo Admin Khu vực",
                            PermissionKey = "create_admin"
                        });
                });

            modelBuilder.Entity("AuthService.API.Entities.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("cca492d0-42b4-42b4-a3ec-4265a521b5f8"),
                            Description = "Toàn quyền, tạo admin khu vực",
                            RoleKey = "super_admin",
                            RoleName = "Super Admin"
                        },
                        new
                        {
                            RoleId = new Guid("7b6c3929-7bce-48e8-9f60-b0df90792c5c"),
                            Description = "Tạo các role khác trong khu vực",
                            RoleKey = "admin",
                            RoleName = "Admin khu vực"
                        },
                        new
                        {
                            RoleId = new Guid("05387973-58b6-48d1-9cc4-11874d712149"),
                            Description = "Duyệt nội dung và package",
                            RoleKey = "manager",
                            RoleName = "Manager"
                        },
                        new
                        {
                            RoleId = new Guid("f5d32824-116a-4f97-ae91-73c7d84c6486"),
                            Description = "Tạo package, duyệt user-member",
                            RoleKey = "staff_onboarding",
                            RoleName = "Staff Onboarding"
                        },
                        new
                        {
                            RoleId = new Guid("d9f65410-6925-4351-a5ad-4aaaf5df0305"),
                            Description = "Tạo event hoạt động Co-Living",
                            RoleKey = "staff_service",
                            RoleName = "Staff Service"
                        },
                        new
                        {
                            RoleId = new Guid("833d3494-42b4-2222-afc2-4265a521c5f8"),
                            Description = "Đăng nội dung",
                            RoleKey = "staff_content",
                            RoleName = "Staff Content"
                        },
                        new
                        {
                            RoleId = new Guid("ed3a2ae2-f05b-47e6-949f-28fb477d5b24"),
                            Description = "Khách đăng nhập",
                            RoleKey = "user",
                            RoleName = "User"
                        },
                        new
                        {
                            RoleId = new Guid("78454018-bec6-459d-85e2-4265a521b5f8"),
                            Description = "Thành viên trả phí",
                            RoleKey = "member",
                            RoleName = "Member"
                        },
                        new
                        {
                            RoleId = new Guid("cca492d0-4de1-42b4-afc2-bb613eeb219b"),
                            Description = "Đối tác nội dung",
                            RoleKey = "partner",
                            RoleName = "Partner"
                        },
                        new
                        {
                            RoleId = new Guid("833d5494-3559-4826-a3ec-58b0b14c7c81"),
                            Description = "Hướng dẫn viên / mentor",
                            RoleKey = "coaching",
                            RoleName = "Coaching"
                        },
                        new
                        {
                            RoleId = new Guid("833d5492-afc2-42b4-afc2-8265a521b5f8"),
                            Description = "Nhà cung cấp nội dung",
                            RoleKey = "supplier",
                            RoleName = "Supplier"
                        });
                });

            modelBuilder.Entity("AuthService.API.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("cca492d0-42b4-42b4-a3ec-4265a521b5f8"),
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0001")
                        },
                        new
                        {
                            RoleId = new Guid("cca492d0-42b4-42b4-a3ec-4265a521b5f8"),
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0002")
                        },
                        new
                        {
                            RoleId = new Guid("cca492d0-42b4-42b4-a3ec-4265a521b5f8"),
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0003")
                        },
                        new
                        {
                            RoleId = new Guid("cca492d0-42b4-42b4-a3ec-4265a521b5f8"),
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0004")
                        },
                        new
                        {
                            RoleId = new Guid("cca492d0-42b4-42b4-a3ec-4265a521b5f8"),
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0005")
                        },
                        new
                        {
                            RoleId = new Guid("cca492d0-42b4-42b4-a3ec-4265a521b5f8"),
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0006")
                        },
                        new
                        {
                            RoleId = new Guid("cca492d0-42b4-42b4-a3ec-4265a521b5f8"),
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0007")
                        },
                        new
                        {
                            RoleId = new Guid("cca492d0-42b4-42b4-a3ec-4265a521b5f8"),
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0008")
                        },
                        new
                        {
                            RoleId = new Guid("cca492d0-42b4-42b4-a3ec-4265a521b5f8"),
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0009")
                        },
                        new
                        {
                            RoleId = new Guid("cca492d0-42b4-42b4-a3ec-4265a521b5f8"),
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0010")
                        },
                        new
                        {
                            RoleId = new Guid("cca492d0-42b4-42b4-a3ec-4265a521b5f8"),
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0011")
                        },
                        new
                        {
                            RoleId = new Guid("7b6c3929-7bce-48e8-9f60-b0df90792c5c"),
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0004")
                        },
                        new
                        {
                            RoleId = new Guid("7b6c3929-7bce-48e8-9f60-b0df90792c5c"),
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0005")
                        },
                        new
                        {
                            RoleId = new Guid("7b6c3929-7bce-48e8-9f60-b0df90792c5c"),
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0006")
                        },
                        new
                        {
                            RoleId = new Guid("7b6c3929-7bce-48e8-9f60-b0df90792c5c"),
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0007")
                        },
                        new
                        {
                            RoleId = new Guid("7b6c3929-7bce-48e8-9f60-b0df90792c5c"),
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0008")
                        },
                        new
                        {
                            RoleId = new Guid("7b6c3929-7bce-48e8-9f60-b0df90792c5c"),
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0009")
                        },
                        new
                        {
                            RoleId = new Guid("7b6c3929-7bce-48e8-9f60-b0df90792c5c"),
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0010")
                        },
                        new
                        {
                            RoleId = new Guid("7b6c3929-7bce-48e8-9f60-b0df90792c5c"),
                            PermissionId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaa0011")
                        });
                });

            modelBuilder.Entity("AuthService.API.Entities.UserAuth", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EmailVerificationExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailVerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LoginAttempt")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetPasswordTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("SetPasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SetPasswordTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.ToTable("AuthUsers", (string)null);
                });

            modelBuilder.Entity("AuthService.API.Entities.UserPermission", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("UserPermissions", (string)null);
                });

            modelBuilder.Entity("AuthService.API.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("AuthService.API.Entities.RolePermission", b =>
                {
                    b.HasOne("AuthService.API.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthService.API.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AuthService.API.Entities.UserPermission", b =>
                {
                    b.HasOne("AuthService.API.Entities.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthService.API.Entities.UserAuth", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthService.API.Entities.UserRole", b =>
                {
                    b.HasOne("AuthService.API.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthService.API.Entities.UserAuth", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthService.API.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("AuthService.API.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AuthService.API.Entities.UserAuth", b =>
                {
                    b.Navigation("UserPermissions");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
